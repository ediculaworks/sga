# SISTEMA DE GEST√ÉO DE AMBUL√ÇNCIAS - CONTEXTO DO PROJETO

**Projeto:** Sistema completo de gest√£o de ambul√¢ncias
**Plataformas:** Web + Mobile (iOS/Android via PWA)
**Database:** PostgreSQL via Supabase
**Reposit√≥rio:** GitHub

---

## ‚ö†Ô∏è INSTRU√á√ïES CR√çTICAS - LEIA ANTES DE QUALQUER A√á√ÉO

### üî¥ REGRA ABSOLUTA: O CHANGELOG.md √â A FONTE DA VERDADE

**ANTES DE FAZER QUALQUER COISA:**
1. **LEIA `CHANGELOG.md`** para entender:
   - Estado atual do projeto
   - √öltima altera√ß√£o feita
   - Arquivos que j√° existem
   - Pr√≥ximo passo recomendado

**AP√ìS COMPLETAR QUALQUER TAREFA:**
2. **ATUALIZE `CHANGELOG.md` IMEDIATAMENTE** com:
   - Data e hora (formato: DD/MM/YYYY HH:MM)
   - O que foi feito (detalhado)
   - Arquivos criados/modificados (caminhos completos)
   - Depend√™ncias instaladas
   - Configura√ß√µes aplicadas
   - Problemas e solu√ß√µes
   - Decis√µes t√©cnicas
   - Pr√≥ximo passo recomendado
   - Status atual

**FORMATO OBRIGAT√ìRIO:**
```markdown
## [DD/MM/YYYY HH:MM] - [Descri√ß√£o da Tarefa]

### ‚úÖ Completado
- Item completado

### üìÅ Arquivos Criados
- `/caminho/completo/arquivo.tsx` - Prop√≥sito

### üìù Arquivos Modificados
- `/caminho/arquivo.ts` - O que mudou

### üì¶ Depend√™ncias
- `pacote@vers√£o` - Para que serve

### üêõ Problemas e Solu√ß√µes
- Problema ‚Üí Solu√ß√£o

### üéØ Decis√µes T√©cnicas
- Decis√£o ‚Üí Justificativa

### ‚è≠Ô∏è Pr√≥ximo Passo
[O que fazer a seguir]

### üìä Status Atual
[Resumo do estado do projeto]
```

**‚ö†Ô∏è SEM CHANGELOG.md ATUALIZADO = TRABALHO PERDIDO**

---

## üîÑ WORKFLOW OBRIGAT√ìRIO

```
1. LER CHANGELOG.md (entender estado atual)
   ‚Üì
2. LER este documento (contexto da tarefa)
   ‚Üì
3. Planejar implementa√ß√£o
   ‚Üì
4. Implementar c√≥digo
   ‚Üì
5. Testar manualmente
   ‚Üì
6. ‚ö†Ô∏è ATUALIZAR CHANGELOG.md (CR√çTICO!) ‚ö†Ô∏è
   ‚Üì
7. Commit descritivo
```

**NUNCA PULE O PASSO 6!**

---

## üìã VIS√ÉO GERAL DO SISTEMA

### Objetivo
Sistema de gest√£o de ambul√¢ncias para empresa que atende:
- **Eventos** - Ambul√¢ncia fica de plant√£o o dia todo
- **Emerg√™ncias** - Atendimentos urgentes
- **Domiciliar** - Atendimento na resid√™ncia do paciente
- **Transfer√™ncias** - Mover pacientes entre hospitais

### Perfis de Usu√°rio (6 tipos)

**Perfis Operacionais:**
1. **MEDICO** - Atende pacientes, registra prontu√°rios
2. **ENFERMEIRO** - Auxilia atendimentos, adiciona notas
3. **MOTORISTA** - Tablet na ambul√¢ncia, inicia/finaliza opera√ß√µes

**Perfis Administrativos:**
4. **CHEFE_MEDICOS** - Cria ocorr√™ncias, gerencia equipe m√©dica
5. **CHEFE_ENFERMEIROS** - Verifica equipamentos m√©dicos, libera ambul√¢ncias
6. **CHEFE_AMBULANCIAS** - Verifica ve√≠culos, atribui recursos

---

## üìä REGRAS DE NEG√ìCIO ESSENCIAIS

### Estados das Ocorr√™ncias
1. **EM_ABERTO** ‚Üí Criada, aguardando profissionais confirmarem
2. **CONFIRMADA** ‚Üí Profissionais confirmados, aguardando atribui√ß√£o de ambul√¢ncia
3. **EM_ANDAMENTO** ‚Üí Motorista iniciou, opera√ß√£o ativa
4. **CONCLUIDA** ‚Üí Finalizada

**Transi√ß√µes Autom√°ticas:**
- EM_ABERTO ‚Üí CONFIRMADA (quando todas as vagas preenchidas)
- Ambul√¢ncia ‚Üí PENDENTE (quando ocorr√™ncia conclu√≠da)

### Tipos de Ambul√¢ncia
- **BASICA** ‚Üí 1 Enfermeiro (sem m√©dico)
- **EMERGENCIA** ‚Üí 1 M√©dico + 1 Enfermeiro

**Regra:** Tipo da ambul√¢ncia define automaticamente a equipe necess√°ria

### Status das Ambul√¢ncias
- **PRONTA** ‚Üí Liberada (checklists t√©cnico E m√©dico OK)
- **PENDENTE** ‚Üí Aguardando verifica√ß√£o
- **REVISAO** ‚Üí Precisa manuten√ß√£o

### Fluxo de Atribui√ß√£o
1. Chefe dos M√©dicos cria ocorr√™ncia
2. Profissionais se inscrevem
3. **Chefe das Ambul√¢ncias** atribui ambul√¢ncia + motorista
4. **Motorista** inicia no tablet ‚Üí Todos veem "EM_ANDAMENTO"

### Gest√£o de Materiais
- **Chefe dos Enfermeiros** verifica equipamentos m√©dicos (matinal)
- **M√©dico** registra consumo ao FINAL da ocorr√™ncia
- **Sistema** atualiza estoque automaticamente
- **Ambul√¢ncia** volta como PENDENTE ap√≥s uso

### Disponibilidade
- Profissionais de folga ‚Üí N√£o veem ocorr√™ncias
- Profissionais j√° alocados ‚Üí N√£o veem ocorr√™ncias
- Sistema verifica agenda automaticamente

---

## üõ†Ô∏è STACK TECNOL√ìGICA

### Core
- **Next.js 14+** (App Router) + **React 18** + **TypeScript**
- **Tailwind CSS** + **shadcn/ui** (componentes)
- **Supabase** (PostgreSQL, Auth, Storage, Realtime)

### State & Data
- **Zustand** (state global)
- **React Query** (cache server)
- **React Hook Form** + **Zod** (forms)

### Features
- **Mapbox/Google Maps** (GPS, rotas)
- **date-fns** (datas)
- **Recharts** (gr√°ficos)
- **React Hot Toast** (notifica√ß√µes)

### PWA & Mobile
- **next-pwa** (Progressive Web App)
- **Geolocation API** (GPS nativo)

### Dev Tools
- **ESLint** + **Prettier**
- **TypeScript strict mode**

---

## üéØ REGRAS DE OURO DO DESENVOLVIMENTO

1. ‚ö†Ô∏è **SEMPRE ler CHANGELOG.md antes de come√ßar**
2. ‚ö†Ô∏è **SEMPRE atualizar CHANGELOG.md ao terminar**
3. **SEMPRE usar TypeScript** (nunca `any`)
4. **SEMPRE usar shadcn/ui** para componentes
5. **SEMPRE validar forms** com Zod
6. **SEMPRE usar React Query** para dados do servidor
7. **SEMPRE pensar mobile-first** (responsivo)
8. **SEMPRE usar Supabase RLS** (seguran√ßa)
9. **SEMPRE testar** cen√°rios positivos E negativos
10. **SEMPRE commitar** com mensagem descritiva

---

## üìÅ ESTRUTURA DE PASTAS PADR√ÉO

```
/src
  /app
    /(auth)
      /login
    /(dashboard)
      /[perfil]        # medico, enfermeiro, etc
    /api
  /components
    /ui                # shadcn components
    /shared            # reutiliz√°veis
    /layout            # Layout, Sidebar, Header
    /dashboard
      /[perfil]        # espec√≠ficos por perfil
  /lib
    /supabase
      client.ts
      types.ts
    /utils
  /types               # TypeScript types
  /hooks               # Custom hooks
  /stores              # Zustand stores
```

---

## ‚úÖ CHECKLIST DE QUALIDADE

**Antes de considerar QUALQUER tarefa completa:**

- [ ] TypeScript sem erros (`npm run type-check`)
- [ ] ESLint sem warnings (`npm run lint`)
- [ ] Responsivo (testar mobile + desktop)
- [ ] Loading states vis√≠veis
- [ ] Error handling implementado
- [ ] Forms validados (Zod)
- [ ] Testado manualmente (positivo E negativo)
- [ ] ‚ö†Ô∏è **CHANGELOG.md ATUALIZADO** ‚ö†Ô∏è
- [ ] Coment√°rios em c√≥digo complexo
- [ ] Commit realizado

**SE FALTOU ALGO = TAREFA INCOMPLETA**

---

## üí° PADR√ïES DE C√ìDIGO

### Componentes
```typescript
// Sempre com tipos expl√≠citos
interface Props {
  title: string;
  onClick: () => void;
}

export function Component({ title, onClick }: Props) {
  // ...
}
```

### Forms
```typescript
// Sempre com Zod + React Hook Form
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';

const schema = z.object({
  field: z.string().min(1, 'Obrigat√≥rio'),
});

type FormData = z.infer<typeof schema>;
```

### Queries Supabase
```typescript
// Sempre com React Query
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/lib/supabase/client';

export function useData() {
  return useQuery({
    queryKey: ['key'],
    queryFn: async () => {
      const { data, error } = await supabase.from('table').select();
      if (error) throw error;
      return data;
    },
  });
}
```

### Nomenclatura
- **Componentes:** PascalCase (`UserCard.tsx`)
- **Fun√ß√µes/Hooks:** camelCase (`useAuth.ts`)
- **Tipos:** PascalCase com sufixo (`UserData`, `ApiResponse`)
- **Constantes:** UPPER_SNAKE_CASE (`MAX_ITEMS`)

---

## üé® DESIGN PRINCIPLES

### UX
- **Touch-friendly** (tablets, mobile)
- **Feedback imediato** (loading, success, error)
- **Mobile-first** (responsivo por padr√£o)
- **Acessibilidade** (keyboard navigation, ARIA)

### Performance
- **Lazy loading** (componentes pesados)
- **React Query cache** (evitar requests desnecess√°rias)
- **Debounce** (inputs de busca)
- **Optimistic updates** (melhor UX)

### Seguran√ßa
- **Row Level Security** (Supabase)
- **Valida√ß√£o server + client** (Zod)
- **Sanitiza√ß√£o** (inputs do usu√°rio)
- **HTTPS only** (produ√ß√£o)

---

## üö® QUANDO ENCONTRAR PROBLEMAS

1. **Documentar no CHANGELOG.md**
   - Problema encontrado
   - Solu√ß√£o aplicada
   - Por que aconteceu

2. **Perguntar ao usu√°rio** se:
   - Decis√£o afeta arquitetura
   - M√∫ltiplas solu√ß√µes poss√≠veis
   - Breaking change necess√°rio
   - Credenciais/senhas necess√°rias

3. **Nunca assumir** estruturas n√£o documentadas

---

## üìù MENSAGENS DE COMMIT

**Formato:**
```
tipo: descri√ß√£o curta

Descri√ß√£o detalhada (opcional)
```

**Tipos:**
- `feat:` Nova funcionalidade
- `fix:` Corre√ß√£o de bug
- `docs:` Documenta√ß√£o
- `style:` Formata√ß√£o
- `refactor:` Refatora√ß√£o
- `test:` Testes
- `chore:` Manuten√ß√£o

**Exemplo:**
```
feat: adiciona dashboard do m√©dico

- Implementa estat√≠sticas
- Cria lista de ocorr√™ncias
- Adiciona modal de detalhes
```

---

## üéØ FOCO E PRIORIDADES

### Sempre Priorizar
1. **Funcionalidade** sobre est√©tica
2. **Performance** sobre features extras
3. **Seguran√ßa** sobre conveni√™ncia
4. **Documenta√ß√£o** sobre c√≥digo r√°pido
5. **Simplicidade** sobre complexidade

### Evitar
- ‚ùå Over-engineering
- ‚ùå Premature optimization
- ‚ùå C√≥digo duplicado
- ‚ùå Depend√™ncias desnecess√°rias
- ‚ùå Coment√°rios √≥bvios

---

## üìö REFER√äNCIAS R√ÅPIDAS

- **Supabase:** https://supabase.com/docs
- **Next.js:** https://nextjs.org/docs
- **shadcn/ui:** https://ui.shadcn.com
- **React Query:** https://tanstack.com/query
- **Zod:** https://zod.dev

---

## üéì LEMBRE-SE

**Este documento = COMO fazer**
**CHANGELOG.md = O QUE foi feito**

**Use ambos sempre:**
- Este documento ‚Üí Contexto e regras
- CHANGELOG.md ‚Üí Estado atual e hist√≥rico

**NUNCA comece sem ler CHANGELOG.md**
**NUNCA termine sem atualizar CHANGELOG.md**

---

**FIM DO CONTEXTO - BOA SORTE! üöë**