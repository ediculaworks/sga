### RESUMO DO DATABASE

**Total de Tabelas:** 23
**Total de ENUMs:** 7
**Total de Índices:** 48+
**Total de Triggers:** 14
**Total de Views:** 5

**Estrutura:**
- 3 tabelas de usuários (usuarios, motoristas, escala)
- 4 tabelas de ambulâncias (ambulancias, equipamentos_catalogo, estoque_ambulancias, gastos_ambulancias)
- 3 tabelas de checklists
- 2 tabelas de ocorrências (ocorrencias, ocorrencias_participantes)
- 5 tabelas de atendimentos (pacientes, atendimentos, atendimentos_arquivos, notas_enfermeiro_pacientes, consumo_materiais)
- 3 tabelas de sistema (notificacoes, rastreamento_ambulancias, logs_sistema)

---

## 4. STACK TECNOLÓGICA

### Frontend Framework
- **Next.js 14+** (App Router) - Framework React full-stack
- **React 18+** - Biblioteca base
- **TypeScript** - Type safety

### Styling
- **Tailwind CSS** - Utility-first CSS
- **shadcn/ui** - Componentes React acessíveis
- **Lucide React** - Ícones
- **Radix UI** - Primitives (base do shadcn/ui)

### Backend/Database
- **Supabase** - PostgreSQL gerenciado
- **Supabase Auth** - Autenticação
- **Supabase Storage** - Armazenamento de arquivos
- **Supabase Realtime** - WebSocket updates
- **Supabase JS Client** - SDK oficial

### State Management
- **Zustand** - State global simples
- **React Query (TanStack Query)** - Cache de server state

### Forms e Validação
- **React Hook Form** - Gerenciamento de formulários
- **Zod** - Schema validation

### Mapas e GPS
- **Mapbox GL JS** ou **Google Maps API** - Mapas interativos
- **Geolocation API** - GPS nativo

### PWA (Mobile)
- **next-pwa** - Progressive Web App
- **Capacitor** (opcional) - Bridge para funcionalidades nativas

### Data e Hora
- **date-fns** - Manipulação de datas

### Upload de Arquivos
- **Supabase Storage** - Storage integrado
- **React Dropzone** - Drag & drop

### Notificações
- **Web Push API** - Push notifications
- **React Hot Toast** ou **Sonner** - Toast in-app

### Gráficos
- **Recharts** - Gráficos React

### Dev Tools
- **ESLint** - Code quality
- **Prettier** - Formatação
- **Husky** - Git hooks

### Deploy
- **Vercel** - Deploy otimizado para Next.js
- **GitHub Actions** - CI/CD

### Package Manager
- **pnpm** ou **npm** - Gerenciamento de dependências

---

## 5. INSTRUÇÕES DE DESENVOLVIMENTO (claude.md)

### Pipeline de Trabalho
1. **Cursor IDE** com Claude Pro no terminal
2. **Desenvolvimento incremental** - uma funcionalidade por vez
3. **Documentação obrigatória** em cada etapa
4. **Commits frequentes** com mensagens descritivas
5. **Testes manuais** após cada implementação

### Fases de Desenvolvimento

#### FASE 1: Setup e Fundação ⬅️ COMEÇAR AQUI
- [ ] Inicializar projeto Next.js com TypeScript
- [ ] Configurar Tailwind CSS
- [ ] Instalar e configurar shadcn/ui
- [ ] Configurar Supabase Client
- [ ] Criar estrutura de pastas
- [ ] Configurar variáveis de ambiente
- [ ] Setup ESLint + Prettier

#### FASE 2: Autenticação
- [ ] Sistema de login
- [ ] Proteção de rotas
- [ ] Gerenciamento de sessão
- [ ] Tipos de perfis

#### FASE 3: Layout e Navegação
- [ ] Layout base responsivo
- [ ] Sidebar navigation
- [ ] Header com user menu
- [ ] Rotas principais por perfil

#### FASE 4: Dashboard (por perfil)
- [ ] Dashboard Médico
- [ ] Dashboard Enfermeiro
- [ ] Dashboard Chefe dos Médicos
- [ ] Dashboard Chefe das Ambulâncias
- [ ] Dashboard Chefe dos Enfermeiros

#### FASE 5: Funcionalidades Core
- [ ] CRUD de Ocorrências
- [ ] Sistema de confirmação de participantes
- [ ] Atribuição de ambulâncias
- [ ] Checklists (técnico e médico)

#### FASE 6: Funcionalidades Avançadas
- [ ] Rastreamento GPS
- [ ] Gestão de estoque
- [ ] Sistema de notificações
- [ ] Upload de arquivos

#### FASE 7: Mobile/PWA
- [ ] Configurar PWA
- [ ] Otimizações mobile
- [ ] Geolocalização
- [ ] Offline support

#### FASE 8: Polimento
- [ ] Testes
- [ ] Performance
- [ ] Acessibilidade
- [ ] Deploy

### Estrutura de Pastas Recomendada

```
/src
  /app
    /(auth)
      /login
    /(dashboard)
      /medico
      /enfermeiro
      /motorista
      /chefe-medicos
      /chefe-enfermeiros
      /chefe-ambulancias
    /api
  /components
    /ui (shadcn components)
    /shared
    /layout
    /dashboard
      /medico
      /enfermeiro
      /chefe-medicos
      /chefe-ambulancias
      /chefe-enfermeiros
  /lib
    /supabase
    /utils
  /types
  /hooks
  /stores
```

### Regras de Ouro

1. **SEMPRE documentar** mudanças em CHANGELOG.md
2. **SEMPRE usar TypeScript** - tipos explícitos
3. **SEMPRE criar componentes reutilizáveis** - DRY principle
4. **SEMPRE testar manualmente** antes de commit
5. **SEMPRE usar shadcn/ui** para componentes base
6. **SEMPRE validar forms** com Zod
7. **SEMPRE otimizar queries** - usar React Query
8. **SEMPRE pensar mobile-first** - responsivo
9. **SEMPRE usar Supabase RLS** - segurança
10. **SEMPRE commitar** após cada feature completa

### Workflow de Desenvolvimento

```
1. Ler contexto atual (CHANGELOG.md)
2. Receber prompt de próxima feature
3. Planejar arquitetura/componentes
4. Implementar código
5. Adicionar tipos TypeScript
6. Testar manualmente
7. Documentar em CHANGELOG.md
8. Atualizar README.md (se necessário)
9. Commit com mensagem descritiva
10. Informar conclusão + próximos passos
```

### Checklist de Qualidade

Antes de considerar uma feature completa:
- [ ] Código TypeScript sem erros
- [ ] ESLint sem warnings
- [ ] Componentes responsivos
- [ ] Loading states implementados
- [ ] Error handling implementado
- [ ] Validação de forms (se aplicável)
- [ ] Testes manuais realizados
- [ ] CHANGELOG.md atualizado
- [ ] Comentários em código complexo
- [ ] Commit realizado

---

## 6. HISTÓRICO DE DECISÕES

### Decisões de Arquitetura

#### Por que Next.js ao invés de React puro?
- SSR para melhor SEO e performance
- API Routes integradas
- Otimização automática de imagens
- Roteamento file-based
- Deploy otimizado no Vercel

#### Por que Supabase ao invés de Firebase?
- PostgreSQL completo (SQL vs NoSQL)
- Row Level Security nativo
- Realtime via PostgreSQL
- Open source
- Melhor para dados relacionais complexos

#### Por que PWA ao invés de React Native?
- Uma única codebase
- Manutenção mais simples
- Deploy mais rápido
- Funciona em todas as plataformas
- Custos menores

#### Por que Zustand ao invés de Redux?
- API mais simples
- Menos boilerplate
- Bundle menor
- Sem providers necessários
- Melhor TypeScript support

#### Por que shadcn/ui ao invés de Material-UI?
- Não é dependência NPM (copy-paste)
- Totalmente customizável
- Tailwind CSS nativo
- Menor bundle size
- Melhor acessibilidade

### Decisões de Funcionalidade

#### Por que o médico registra materiais ao FINAL da ocorrência?
- Mais prático durante atendimento
- Verifica itens fisicamente na ambulância
- Uma única vez, menos chance de erro
- Facilita contagem real vs teórica

#### Por que Chefe dos Enfermeiros verifica equipamentos médicos?
- Especialista em materiais médicos
- Conhece necessidades clínicas
- Separação de responsabilidades clara
- Chefe das Ambulâncias foca em veículos

#### Por que tipo de ambulância define equipe automaticamente?
- Evita erros humanos
- Básica sempre tem 1 enfermeiro
- Emergência sempre tem médico + enfermeiro
- Simplifica criação de ocorrências

#### Por que motorista inicia ocorrência (não automático)?
- Confirma que equipe está pronta
- Permite ajustes de última hora
- Motorista confirma saída física
- Controle humano sobre automação

#### Por que tablet fixo na ambulância?
- Motorista não precisa levar dispositivo pessoal
- Sempre disponível no veículo
- Vinculado à ambulância específica
- Facilita rastreamento

---

## 7. PRÓXIMOS PASSOS

### Imediato (Agora)

1. **Criar arquivos de documentação:**
   ```bash
   touch TECH_STACK.md
   touch claude.md
   touch CHANGELOG.md
   touch README.md
   ```

2. **Copiar conteúdo dos artifacts para os arquivos**

3. **Executar PROMPT DE INICIALIZAÇÃO:**

```
Estou iniciando o desenvolvimento do Sistema de Gestão de Ambulâncias.

CONTEXTO:
- Projeto Next.js 14+ com TypeScript
- Database PostgreSQL já configurado no Supabase (23 tabelas, triggers, views)
- Stack definida: Next.js + React + TypeScript + Tailwind + shadcn/ui
- Repositório GitHub já sincronizado
- Arquivos de documentação criados: TECH_STACK.md, claude.md, CHANGELOG.md

TAREFA - FASE 1: Setup e Fundação
Crie a estrutura inicial do projeto seguindo estas etapas:

1. Inicialize um novo projeto Next.js 14 com App Router e TypeScript
2. Configure Tailwind CSS
3. Instale e configure shadcn/ui com estes componentes:
   - button, card, input, label, select, toast, dropdown-menu, dialog, badge
4. Configure Supabase Client com as credenciais corretas
5. Crie a estrutura de pastas recomendada
6. Configure variáveis de ambiente (.env.local e .env.example)
7. Configure ESLint + Prettier

ESTRUTURA DE PASTAS ESPERADA:
/src
  /app
    /(auth)/login
    /(dashboard)
      /medico
      /enfermeiro
      /motorista
      /chefe-medicos
      /chefe-enfermeiros
      /chefe-ambulancias
    /api
  /components
    /ui (shadcn)
    /shared
    /layout
  /lib
    /supabase
    /utils
  /types
  /hooks
  /stores

DELIVERABLES:
1. Projeto Next.js rodando em localhost:3000
2. Tailwind CSS funcionando
3. shadcn/ui instalado
4. Supabase client configurado
5. README.md atualizado
6. CHANGELOG.md preenchido
7. .env.example criado

DOCUMENTAÇÃO OBRIGATÓRIA:
1. README.md - Instruções de setup
2. CHANGELOG.md - Lista detalhada de mudanças
3. Comentários inline em configurações

COMEÇE AGORA!
```

### Após FASE 1

4. **FASE 2: Sistema de Autenticação**
   - Página de login
   - Middleware de autenticação
   - Proteção de rotas por perfil
   - Hook useAuth

5. **FASE 3: Layout Base**
   - Sidebar responsiva
   - Navigation por perfil
   - Header com user menu
   - Mobile menu

6. **FASE 4: Primeiro Dashboard (Médico)**
   - Estatísticas
   - Lista de ocorrências
   - Modal de detalhes
   - Confirmação de participação

### Credenciais Supabase Necessárias

Pegar em: https://supabase.com/dashboard → Seu Projeto → Settings → API

- `NEXT_PUBLIC_SUPABASE_URL`
- `NEXT_PUBLIC_SUPABASE_ANON_KEY`

---

## 8. REFERÊNCIAS E LINKS ÚTEIS

### Documentação
- **Supabase:** https://supabase.com/docs
- **Next.js:** https://nextjs.org/docs
- **shadcn/ui:** https://ui.shadcn.com
- **Tailwind CSS:** https://tailwindcss.com/docs
- **React Query:** https://tanstack.com/query
- **Zustand:** https://github.com/pmndrs/zustand
- **React Hook Form:** https://react-hook-form.com
- **Zod:** https://zod.dev

### Referências de Código
- **Supabase Auth:** https://supabase.com/docs/guides/auth
- **Next.js App Router:** https://nextjs.org/docs/app
- **shadcn/ui Examples:** https://ui.shadcn.com/examples
- **Mapbox GL JS:** https://docs.mapbox.com/mapbox-gl-js

---

## 9. NOTAS IMPORTANTES

### Performance
- Priorizar sempre eficiência e velocidade
- Agilidade é fator crítico para o usuário
- Sistema deve ser rápido mesmo com muitos dados

### UX/UI
- Interface touch-friendly (pensando em tablets)
- Mobile-first approach
- Loading states sempre visíveis
- Feedback visual imediato

### Segurança
- Supabase RLS em todas as tabelas
- Validação server-side
- Sanitização de inputs
- HTTPS obrigatório

### Escalabilidade
- Database normalizado
- Índices em queries frequentes
- Cache inteligente
- Realtime apenas onde necessário

### Manutenibilidade
- Código limpo e documentado
- Componentes reutilizáveis
- TypeScript para type safety
- Testes quando possível

---

## 10. GLOSSÁRIO DO PROJETO

- **Ocorrência** = Chamada/Operação de ambulância
- **Remoção** = Transferência de paciente para hospital
- **Status Pronta** = Ambulância liberada (checklists OK)
- **Status Pendente** = Ambulância aguardando verificação
- **Status REVISÃO** = Ambulância precisa manutenção
- **Em Aberto** = Ocorrência criada, aguardando profissionais
- **Confirmada** = Profissionais confirmados, aguardando atribuição
- **Em Andamento** = Operação ativa
- **Concluída** = Operação finalizada
- **Evento** = Ambulância fica de plantão o dia todo
- **Domiciliar** = Atendimento na residência do paciente
- **Emergência** = Atendimento urgente
- **Transferência** = Mover paciente entre hospitais
- **Básica** = Ambulância sem médico (só enfermeiro)
- **Emergência (tipo)** = Ambulância com médico + enfermeiro

---

## FIM DO DOCUMENTO

**Este documento contém TUDO o que foi discutido e planejado.**

**Use como referência principal no Cursor/Claude para manter contexto completo do projeto.**

**Data:** 07 de Outubro de 2025
**Status:** Database configurado, pronto para iniciar desenvolvimento frontend
**Próximo Passo:** Executar PROMPT DE INICIALIZAÇÃO (Seção 7)### Fluxo de Gestão de Materiais Médicos

1. **Verificação Matinal:** Chefe dos Enfermeiros define tipo da ambulância (Emergência ou Básica), verifica e repõe materiais conforme checklist do tipo → Status "Pronta"
2. **Durante Ocorrência:** Médico atende pacientes (não registra consumo ainda)
3. **Final da Ocorrência:** Médico registra consumo de materiais em lista única enquanto verifica os itens na ambulância
4. **Atualização Automática:** Sistema atualiza quantidade de materiais da ambulância em tempo real
5. **Retorno à Base:** Ambulância volta com status "Pendente"
6. **Nova Verificação:** Chefe dos Enfermeiros visualiza materiais a repor (baseado no consumo registrado)
7. **Reposição:** Após repor materiais, definir tipo e aprovar checklist → Ambulância volta ao status "Pronta"

### Regras de Roteamento (Motorista/Tablet)

- Se a ocorrência requer buscar médico: primeiro destino é sempre a residência do médico
- Após buscar o médico: botão "Próximo Destino" direciona para o local da ocorrência
- Ao finalizar: rota de retorno à base é automaticamente disponibilizada

### Regras de Manutenção

- Sistema monitora automaticamente a kilometragem de cada ambulância
- Quando ambulância ultrapassa kilometragem recomendada para revisão, status muda automaticamente para "REVISÃO"
- Alertas aparecem no Dashboard do Chefe dos Médicos

### Verificações Diárias

**Realizadas no início do dia, diariamente:**

#### Chefe das Ambulâncias:
- Verifica parâmetros técnicos dos veículos
- Gasolina, kilometragem, temperatura, pressão dos pneus, revisão

#### Chefe dos Enfermeiros:
- Verifica equipamentos médicos de todas as ambulâncias
- **Define o tipo de cada ambulância (Emergência ou Básica)** antes de completar checklist
- Repõe materiais conforme checklist do tipo escolhido
- Objetivo: deixar toda a frota com status "Pronta" no início do dia

---

## 3. ESTRUTURA DO DATABASE (PostgreSQL)

### CÓDIGO SQL COMPLETO - DIVIDIDO EM 9 PARTES

#### PARTE 1: ENUMS E TABELAS DE USUÁRIOS

```sql
-- ============================================
-- PARTE 1: ENUMS E TABELAS DE USUÁRIOS
-- Execute esta parte primeiro
-- ============================================

-- ENUMS
CREATE TYPE tipo_perfil AS ENUM (
    'MEDICO',
    'ENFERMEIRO',
    'MOTORISTA',
    'CHEFE_MEDICOS',
    'CHEFE_ENFERMEIROS',
    'CHEFE_AMBULANCIAS'
);

CREATE TYPE status_ocorrencia AS ENUM (
    'EM_ABERTO',
    'CONFIRMADA',
    'EM_ANDAMENTO',
    'CONCLUIDA'
);

CREATE TYPE tipo_ambulancia AS ENUM (
    'BASICA',
    'EMERGENCIA'
);

CREATE TYPE tipo_trabalho AS ENUM (
    'EVENTO',
    'DOMICILIAR',
    'EMERGENCIA',
    'TRANSFERENCIA'
);

CREATE TYPE status_ambulancia AS ENUM (
    'PRONTA',
    'PENDENTE',
    'REVISAO',
    'EM_OPERACAO'
);

CREATE TYPE categoria_equipamento AS ENUM (
    'VIAS_AEREAS_AMBU',
    'EPI_INDIVIDUAL',
    'PROCEDIMENTO_PUNCAO',
    'MATERIAIS_ELETRICOS',
    'MATERIAL_AMB_GERAL',
    'SUTURA_BOLSA',
    'SONDAGEM_BOLSA'
);

CREATE TYPE sexo AS ENUM ('MASCULINO', 'FEMININO', 'OUTRO');

-- TABELA: usuarios
CREATE TABLE usuarios (
    id SERIAL PRIMARY KEY,
    nome_completo VARCHAR(255) NOT NULL,
    cpf VARCHAR(14) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    telefone VARCHAR(20),
    senha_hash VARCHAR(255) NOT NULL,
    tipo_perfil tipo_perfil NOT NULL,
    idade INTEGER,
    sexo sexo,
    endereco_completo TEXT,
    data_admissao DATE,
    ativo BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_usuarios_tipo_perfil ON usuarios(tipo_perfil);
CREATE INDEX idx_usuarios_ativo ON usuarios(ativo);
CREATE INDEX idx_usuarios_cpf ON usuarios(cpf);

-- TABELA: motoristas
CREATE TABLE motoristas (
    id SERIAL PRIMARY KEY,
    usuario_id INTEGER UNIQUE NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    cnh VARCHAR(20) UNIQUE NOT NULL,
    validade_cnh DATE NOT NULL,
    categoria_cnh VARCHAR(5) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_motoristas_usuario_id ON motoristas(usuario_id);

-- TABELA: escala
CREATE TABLE escala (
    id SERIAL PRIMARY KEY,
    usuario_id INTEGER NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    data DATE NOT NULL,
    disponivel BOOLEAN DEFAULT TRUE,
    observacoes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(usuario_id, data)
);

CREATE INDEX idx_escala_usuario_data ON escala(usuario_id, data);
CREATE INDEX idx_escala_data ON escala(data);
```

#### PARTE 2: TABELAS DE AMBULÂNCIAS

```sql
-- ============================================
-- PARTE 2: TABELAS DE AMBULÂNCIAS
-- Execute após a Parte 1
-- ============================================

-- TABELA: ambulancias
CREATE TABLE ambulancias (
    id SERIAL PRIMARY KEY,
    placa VARCHAR(10) UNIQUE NOT NULL,
    marca VARCHAR(100) NOT NULL,
    modelo VARCHAR(100) NOT NULL,
    ano INTEGER NOT NULL,
    motor VARCHAR(50),
    kilometragem DECIMAL(10, 2) NOT NULL DEFAULT 0,
    ultima_revisao DATE,
    proxima_revisao DATE,
    kilometragem_proxima_revisao DECIMAL(10, 2),
    status_ambulancia status_ambulancia DEFAULT 'PENDENTE',
    tipo_atual tipo_ambulancia,
    tablet_id VARCHAR(100) UNIQUE,
    ativo BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_ambulancias_status ON ambulancias(status_ambulancia);
CREATE INDEX idx_ambulancias_tipo ON ambulancias(tipo_atual);
CREATE INDEX idx_ambulancias_placa ON ambulancias(placa);

-- TABELA: equipamentos_catalogo
CREATE TABLE equipamentos_catalogo (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    categoria categoria_equipamento NOT NULL,
    tipo_ambulancia tipo_ambulancia NOT NULL,
    unidade_medida VARCHAR(50) DEFAULT 'unidade',
    descricao TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_equipamentos_categoria ON equipamentos_catalogo(categoria);
CREATE INDEX idx_equipamentos_tipo ON equipamentos_catalogo(tipo_ambulancia);

-- TABELA: estoque_ambulancias
CREATE TABLE estoque_ambulancias (
    id SERIAL PRIMARY KEY,
    ambulancia_id INTEGER NOT NULL REFERENCES ambulancias(id) ON DELETE CASCADE,
    equipamento_id INTEGER NOT NULL REFERENCES equipamentos_catalogo(id) ON DELETE CASCADE,
    quantidade_atual DECIMAL(10, 2) NOT NULL DEFAULT 0,
    quantidade_minima DECIMAL(10, 2) DEFAULT 0,
    ultima_verificacao TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(ambulancia_id, equipamento_id)
);

CREATE INDEX idx_estoque_ambulancia ON estoque_ambulancias(ambulancia_id);
CREATE INDEX idx_estoque_equipamento ON estoque_ambulancias(equipamento_id);

-- TABELA: gastos_ambulancias
CREATE TABLE gastos_ambulancias (
    id SERIAL PRIMARY KEY,
    ambulancia_id INTEGER NOT NULL REFERENCES ambulancias(id) ON DELETE CASCADE,
    tipo_gasto VARCHAR(100) NOT NULL,
    valor DECIMAL(10, 2) NOT NULL,
    descricao TEXT,
    data_gasto DATE NOT NULL,
    registrado_por INTEGER REFERENCES usuarios(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_gastos_ambulancia ON gastos_ambulancias(ambulancia_id);
CREATE INDEX idx_gastos_data ON gastos_ambulancias(data_gasto);
CREATE INDEX idx_gastos_tipo ON gastos_ambulancias(tipo_gasto);
```

#### PARTE 3: TABELAS DE CHECKLISTS

```sql
-- ============================================
-- PARTE 3: TABELAS DE CHECKLISTS
-- Execute após a Parte 2
-- ============================================

-- TABELA: checklist_tecnico_ambulancias
CREATE TABLE checklist_tecnico_ambulancias (
    id SERIAL PRIMARY KEY,
    ambulancia_id INTEGER NOT NULL REFERENCES ambulancias(id) ON DELETE CASCADE,
    verificado_por INTEGER NOT NULL REFERENCES usuarios(id),
    data_verificacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    gasolina_ok BOOLEAN DEFAULT FALSE,
    kilometragem_registrada DECIMAL(10, 2),
    temperatura_ok BOOLEAN DEFAULT FALSE,
    pressao_pneus_ok BOOLEAN DEFAULT FALSE,
    revisao_ok BOOLEAN DEFAULT FALSE,
    observacoes TEXT,
    aprovado BOOLEAN DEFAULT FALSE
);

CREATE INDEX idx_checklist_tecnico_ambulancia ON checklist_tecnico_ambulancias(ambulancia_id);
CREATE INDEX idx_checklist_tecnico_data ON checklist_tecnico_ambulancias(data_verificacao);

-- TABELA: checklist_equipamentos_ambulancias
CREATE TABLE checklist_equipamentos_ambulancias (
    id SERIAL PRIMARY KEY,
    ambulancia_id INTEGER NOT NULL REFERENCES ambulancias(id) ON DELETE CASCADE,
    verificado_por INTEGER NOT NULL REFERENCES usuarios(id),
    data_verificacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    tipo_definido tipo_ambulancia NOT NULL,
    observacoes TEXT,
    aprovado BOOLEAN DEFAULT FALSE
);

CREATE INDEX idx_checklist_equip_ambulancia ON checklist_equipamentos_ambulancias(ambulancia_id);
CREATE INDEX idx_checklist_equip_data ON checklist_equipamentos_ambulancias(data_verificacao);

-- TABELA: checklist_equipamentos_itens
CREATE TABLE checklist_equipamentos_itens (
    id SERIAL PRIMARY KEY,
    checklist_id INTEGER NOT NULL REFERENCES checklist_equipamentos_ambulancias(id) ON DELETE CASCADE,
    equipamento_id INTEGER NOT NULL REFERENCES equipamentos_catalogo(id),
    quantidade_verificada DECIMAL(10, 2) NOT NULL,
    quantidade_reposta DECIMAL(10, 2) DEFAULT 0,
    conforme BOOLEAN DEFAULT TRUE,
    observacoes TEXT
);

CREATE INDEX idx_checklist_itens_checklist ON checklist_equipamentos_itens(checklist_id);
```

#### PARTE 4: TABELAS DE OCORRÊNCIAS

```sql
-- ============================================
-- PARTE 4: TABELAS DE OCORRÊNCIAS
-- Execute após a Parte 3
-- ============================================

-- TABELA: ocorrencias
CREATE TABLE ocorrencias (
    id SERIAL PRIMARY KEY,
    numero_ocorrencia VARCHAR(50) UNIQUE NOT NULL,
    tipo_ambulancia tipo_ambulancia NOT NULL,
    tipo_trabalho tipo_trabalho NOT NULL,
    status_ocorrencia status_ocorrencia DEFAULT 'EM_ABERTO',
    descricao TEXT,
    local_ocorrencia TEXT NOT NULL,
    endereco_completo TEXT,
    latitude DECIMAL(10, 8),
    longitude DECIMAL(11, 8),
    data_ocorrencia DATE NOT NULL,
    horario_saida TIME NOT NULL,
    horario_chegada_local TIME,
    horario_termino TIME,
    carga_horaria INTEGER,
    criado_por INTEGER NOT NULL REFERENCES usuarios(id),
    ambulancia_id INTEGER REFERENCES ambulancias(id),
    motorista_id INTEGER REFERENCES usuarios(id),
    data_atribuicao TIMESTAMP,
    data_inicio TIMESTAMP,
    data_conclusao TIMESTAMP,
    duracao_total INTEGER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_ocorrencias_status ON ocorrencias(status_ocorrencia);
CREATE INDEX idx_ocorrencias_tipo ON ocorrencias(tipo_trabalho);
CREATE INDEX idx_ocorrencias_data ON ocorrencias(data_ocorrencia);
CREATE INDEX idx_ocorrencias_ambulancia ON ocorrencias(ambulancia_id);
CREATE INDEX idx_ocorrencias_numero ON ocorrencias(numero_ocorrencia);

-- TABELA: ocorrencias_participantes
CREATE TABLE ocorrencias_participantes (
    id SERIAL PRIMARY KEY,
    ocorrencia_id INTEGER NOT NULL REFERENCES ocorrencias(id) ON DELETE CASCADE,
    usuario_id INTEGER NOT NULL REFERENCES usuarios(id),
    funcao tipo_perfil NOT NULL,
    valor_pagamento DECIMAL(10, 2),
    data_pagamento DATE,
    pago BOOLEAN DEFAULT FALSE,
    confirmado BOOLEAN DEFAULT FALSE,
    data_confirmacao TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(ocorrencia_id, usuario_id)
);

CREATE INDEX idx_participantes_ocorrencia ON ocorrencias_participantes(ocorrencia_id);
CREATE INDEX idx_participantes_usuario ON ocorrencias_participantes(usuario_id);
CREATE INDEX idx_participantes_pago ON ocorrencias_participantes(pago);
```

#### PARTE 5: TABELAS DE PACIENTES E ATENDIMENTOS

```sql
-- ============================================
-- PARTE 5: TABELAS DE PACIENTES E ATENDIMENTOS
-- Execute após a Parte 4
-- ============================================

-- TABELA: pacientes
CREATE TABLE pacientes (
    id SERIAL PRIMARY KEY,
    nome_completo VARCHAR(255) NOT NULL,
    cpf VARCHAR(14) UNIQUE,
    data_nascimento DATE,
    idade INTEGER,
    sexo sexo,
    telefone VARCHAR(20),
    endereco_completo TEXT,
    contato_emergencia VARCHAR(255),
    telefone_emergencia VARCHAR(20),
    observacoes_gerais TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_pacientes_nome ON pacientes(nome_completo);
CREATE INDEX idx_pacientes_cpf ON pacientes(cpf);

-- TABELA: atendimentos
CREATE TABLE atendimentos (
    id SERIAL PRIMARY KEY,
    ocorrencia_id INTEGER NOT NULL REFERENCES ocorrencias(id) ON DELETE CASCADE,
    paciente_id INTEGER NOT NULL REFERENCES pacientes(id),
    medico_id INTEGER REFERENCES usuarios(id),
    data_atendimento TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    queixa_principal TEXT,
    quadro_clinico TEXT,
    procedimentos_realizados TEXT,
    diagnostico TEXT,
    remocao BOOLEAN DEFAULT FALSE,
    hospital_destino VARCHAR(255),
    observacoes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_atendimentos_ocorrencia ON atendimentos(ocorrencia_id);
CREATE INDEX idx_atendimentos_paciente ON atendimentos(paciente_id);
CREATE INDEX idx_atendimentos_medico ON atendimentos(medico_id);
CREATE INDEX idx_atendimentos_data ON atendimentos(data_atendimento);

-- TABELA: atendimentos_arquivos
CREATE TABLE atendimentos_arquivos (
    id SERIAL PRIMARY KEY,
    atendimento_id INTEGER NOT NULL REFERENCES atendimentos(id) ON DELETE CASCADE,
    tipo_arquivo VARCHAR(50) NOT NULL,
    nome_arquivo VARCHAR(255) NOT NULL,
    caminho_arquivo TEXT NOT NULL,
    tamanho_bytes BIGINT,
    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_arquivos_atendimento ON atendimentos_arquivos(atendimento_id);

-- TABELA: notas_enfermeiro_pacientes
CREATE TABLE notas_enfermeiro_pacientes (
    id SERIAL PRIMARY KEY,
    atendimento_id INTEGER NOT NULL REFERENCES atendimentos(id) ON DELETE CASCADE,
    enfermeiro_id INTEGER NOT NULL REFERENCES usuarios(id),
    nota TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_notas_atendimento ON notas_enfermeiro_pacientes(atendimento_id);
CREATE INDEX idx_notas_enfermeiro ON notas_enfermeiro_pacientes(enfermeiro_id);

-- TABELA: consumo_materiais
CREATE TABLE consumo_materiais (
    id SERIAL PRIMARY KEY,
    ocorrencia_id INTEGER NOT NULL REFERENCES ocorrencias(id) ON DELETE CASCADE,
    ambulancia_id INTEGER NOT NULL REFERENCES ambulancias(id),
    equipamento_id INTEGER NOT NULL REFERENCES equipamentos_catalogo(id),
    quantidade_utilizada DECIMAL(10, 2) NOT NULL,
    registrado_por INTEGER NOT NULL REFERENCES usuarios(id),
    data_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_consumo_ocorrencia ON consumo_materiais(ocorrencia_id);
CREATE INDEX idx_consumo_ambulancia ON consumo_materiais(ambulancia_id);
CREATE INDEX idx_consumo_equipamento ON consumo_materiais(equipamento_id);
```

#### PARTE 6: TABELAS DE SISTEMA

```sql
-- ============================================
-- PARTE 6: TABELAS DE SISTEMA
-- Execute após a Parte 5
-- ============================================

-- TABELA: notificacoes
CREATE TABLE notificacoes (
    id SERIAL PRIMARY KEY,
    remetente_id INTEGER REFERENCES usuarios(id),
    destinatario_id INTEGER REFERENCES usuarios(id),
    ocorrencia_id INTEGER REFERENCES ocorrencias(id),
    tipo_notificacao VARCHAR(50) NOT NULL,
    titulo VARCHAR(255) NOT NULL,
    mensagem TEXT NOT NULL,
    lida BOOLEAN DEFAULT FALSE,
    data_leitura TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_notificacoes_destinatario ON notificacoes(destinatario_id);
CREATE INDEX idx_notificacoes_lida ON notificacoes(lida);
CREATE INDEX idx_notificacoes_data ON notificacoes(created_at);

-- TABELA: rastreamento_ambulancias
CREATE TABLE rastreamento_ambulancias (
    id SERIAL PRIMARY KEY,
    ambulancia_id INTEGER NOT NULL REFERENCES ambulancias(id) ON DELETE CASCADE,
    ocorrencia_id INTEGER REFERENCES ocorrencias(id),
    latitude DECIMAL(10, 8) NOT NULL,
    longitude DECIMAL(11, 8) NOT NULL,
    velocidade DECIMAL(5, 2),
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_rastreamento_ambulancia ON rastreamento_ambulancias(ambulancia_id);
CREATE INDEX idx_rastreamento_timestamp ON rastreamento_ambulancias(timestamp);
CREATE INDEX idx_rastreamento_ocorrencia ON rastreamento_ambulancias(ocorrencia_id);

-- TABELA: logs_sistema
CREATE TABLE logs_sistema (
    id SERIAL PRIMARY KEY,
    usuario_id INTEGER REFERENCES usuarios(id),
    acao VARCHAR(100) NOT NULL,
    tabela_afetada VARCHAR(100),
    registro_id INTEGER,
    descricao TEXT,
    ip_address VARCHAR(45),
    user_agent TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_logs_usuario ON logs_sistema(usuario_id);
CREATE INDEX idx_logs_acao ON logs_sistema(acao);
CREATE INDEX idx_logs_data ON logs_sistema(created_at);
```

#### PARTE 7: TRIGGERS BÁSICOS

```sql
-- ============================================
-- PARTE 7: TRIGGERS BÁSICOS
-- Execute após a Parte 6
-- ============================================

-- Função para atualizar updated_at automaticamente
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$ language 'plpgsql';

-- Aplicar trigger nas tabelas
CREATE TRIGGER update_usuarios_updated_at BEFORE UPDATE ON usuarios
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_motoristas_updated_at BEFORE UPDATE ON motoristas
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_escala_updated_at BEFORE UPDATE ON escala
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_ambulancias_updated_at BEFORE UPDATE ON ambulancias
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_equipamentos_updated_at BEFORE UPDATE ON equipamentos_catalogo
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_estoque_updated_at BEFORE UPDATE ON estoque_ambulancias
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_ocorrencias_updated_at BEFORE UPDATE ON ocorrencias
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_pacientes_updated_at BEFORE UPDATE ON pacientes
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_atendimentos_updated_at BEFORE UPDATE ON atendimentos
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
```

#### PARTE 8: TRIGGERS DE LÓGICA DE NEGÓCIO

```sql
-- ============================================
-- PARTE 8: TRIGGERS DE LÓGICA DE NEGÓCIO
-- Execute após a Parte 7
-- ============================================

-- Trigger: Atualizar estoque após consumo
CREATE OR REPLACE FUNCTION atualizar_estoque_apos_consumo()
RETURNS TRIGGER AS $
BEGIN
    UPDATE estoque_ambulancias
    SET quantidade_atual = quantidade_atual - NEW.quantidade_utilizada,
        updated_at = CURRENT_TIMESTAMP
    WHERE ambulancia_id = NEW.ambulancia_id
    AND equipamento_id = NEW.equipamento_id;
    
    RETURN NEW;
END;
$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_atualizar_estoque
AFTER INSERT ON consumo_materiais
FOR EACH ROW
EXECUTE FUNCTION atualizar_estoque_apos_consumo();

-- Trigger: Mudar status ambulância para PENDENTE após retorno
CREATE OR REPLACE FUNCTION mudar_status_ambulancia_apos_conclusao()
RETURNS TRIGGER AS $
BEGIN
    IF NEW.status_ocorrencia = 'CONCLUIDA' AND OLD.status_ocorrencia != 'CONCLUIDA' THEN
        UPDATE ambulancias
        SET status_ambulancia = 'PENDENTE',
            updated_at = CURRENT_TIMESTAMP
        WHERE id = NEW.ambulancia_id;
    END IF;
    
    RETURN NEW;
END;
$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_status_ambulancia_conclusao
AFTER UPDATE ON ocorrencias
FOR EACH ROW
EXECUTE FUNCTION mudar_status_ambulancia_apos_conclusao();

-- Trigger: Verificar kilometragem para revisão
CREATE OR REPLACE FUNCTION verificar_revisao_ambulancia()
RETURNS TRIGGER AS $
BEGIN
    IF NEW.kilometragem >= NEW.kilometragem_proxima_revisao THEN
        NEW.status_ambulancia = 'REVISAO';
        
        INSERT INTO notificacoes (tipo_notificacao, titulo, mensagem)
        VALUES (
            'MANUTENCAO',
            'Ambulância necessita revisão',
            'A ambulância ' || NEW.placa || ' atingiu a kilometragem para revisão.'
        );
    END IF;
    
    RETURN NEW;
END;
$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_verificar_revisao
BEFORE UPDATE ON ambulancias
FOR EACH ROW
EXECUTE FUNCTION verificar_revisao_ambulancia();

-- Trigger: Calcular duração total da ocorrência
CREATE OR REPLACE FUNCTION calcular_duracao_ocorrencia()
RETURNS TRIGGER AS $
BEGIN
    IF NEW.status_ocorrencia = 'CONCLUIDA' AND NEW.data_inicio IS NOT NULL AND NEW.data_conclusao IS NOT NULL THEN
        NEW.duracao_total = EXTRACT(EPOCH FROM (NEW.data_conclusao - NEW.data_inicio)) / 60;
    END IF;
    
    RETURN NEW;
END;
$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_calcular_duracao
BEFORE UPDATE ON ocorrencias
FOR EACH ROW
EXECUTE FUNCTION calcular_duracao_ocorrencia();

-- Trigger: Mudar status ocorrência para CONFIRMADA automaticamente
CREATE OR REPLACE FUNCTION verificar_ocorrencia_confirmada()
RETURNS TRIGGER AS $
DECLARE
    vagas_necessarias INTEGER;
    vagas_preenchidas INTEGER;
    tipo_amb tipo_ambulancia;
BEGIN
    SELECT tipo_ambulancia INTO tipo_amb FROM ocorrencias WHERE id = NEW.ocorrencia_id;
    
    IF tipo_amb = 'BASICA' THEN
        vagas_necessarias := 1;
    ELSE
        vagas_necessarias := 2;
    END IF;
    
    SELECT COUNT(*) INTO vagas_preenchidas
    FROM ocorrencias_participantes
    WHERE ocorrencia_id = NEW.ocorrencia_id AND confirmado = TRUE;
    
    IF vagas_preenchidas >= vagas_necessarias THEN
        UPDATE ocorrencias
        SET status_ocorrencia = 'CONFIRMADA',
            updated_at = CURRENT_TIMESTAMP
        WHERE id = NEW.ocorrencia_id AND status_ocorrencia = 'EM_ABERTO';
    END IF;
    
    RETURN NEW;
END;
$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_verificar_confirmacao
AFTER INSERT OR UPDATE ON ocorrencias_participantes
FOR EACH ROW
WHEN (NEW.confirmado = TRUE)
EXECUTE FUNCTION verificar_ocorrencia_confirmada();
```

#### PARTE 9: VIEWS PARA RELATÓRIOS (FINAL)

```sql
-- ============================================
-- PARTE 9: VIEWS PARA RELATÓRIOS (FINAL)
-- Execute após a Parte 8
-- ============================================

-- View: Resumo de ocorrências por período
CREATE VIEW vw_resumo_ocorrencias AS
SELECT 
    DATE_TRUNC('month', data_ocorrencia) as mes,
    tipo_trabalho,
    tipo_ambulancia,
    status_ocorrencia,
    COUNT(*) as total_ocorrencias,
    AVG(duracao_total) as duracao_media_minutos
FROM ocorrencias
GROUP BY DATE_TRUNC('month', data_ocorrencia), tipo_trabalho, tipo_ambulancia, status_ocorrencia;

-- View: Estatísticas por ambulância
CREATE VIEW vw_estatisticas_ambulancias AS
SELECT 
    a.id,
    a.placa,
    a.modelo,
    a.status_ambulancia,
    COUNT(DISTINCT o.id) as total_ocorrencias,
    SUM(CASE WHEN o.tipo_trabalho = 'EMERGENCIA' THEN 1 ELSE 0 END) as total_emergencias,
    SUM(CASE WHEN o.tipo_trabalho = 'EVENTO' THEN 1 ELSE 0 END) as total_eventos,
    SUM(CASE WHEN o.tipo_trabalho = 'DOMICILIAR' THEN 1 ELSE 0 END) as total_domiciliar,
    SUM(CASE WHEN o.tipo_trabalho = 'TRANSFERENCIA' THEN 1 ELSE 0 END) as total_transferencias,
    COALESCE(SUM(g.valor), 0) as total_gastos
FROM ambulancias a
LEFT JOIN ocorrencias o ON a.id = o.ambulancia_id
LEFT JOIN gastos_ambulancias g ON a.id = g.ambulancia_id
GROUP BY a.id, a.placa, a.modelo, a.status_ambulancia;

-- View: Profissionais disponíveis por data
CREATE VIEW vw_profissionais_disponiveis AS
SELECT 
    e.data,
    u.id as usuario_id,
    u.nome_completo,
    u.tipo_perfil,
    e.disponivel,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM ocorrencias_participantes op
            JOIN ocorrencias o ON op.ocorrencia_id = o.id
            WHERE op.usuario_id = u.id 
            AND o.data_ocorrencia = e.data
            AND o.status_ocorrencia IN ('CONFIRMADA', 'EM_ANDAMENTO')
        ) THEN FALSE
        ELSE TRUE
    END as livre_para_ocorrencias
FROM escala e
JOIN usuarios u ON e.usuario_id = u.id
WHERE u.tipo_perfil IN ('MEDICO', 'ENFERMEIRO')
AND u.ativo = TRUE;

-- View: Estoque baixo de equipamentos
CREATE VIEW vw_estoque_baixo AS
SELECT 
    a.placa,
    ec.nome as equipamento,
    ec.categoria,
    ea.quantidade_atual,
    ea.quantidade_minima,
    (ea.quantidade_minima - ea.quantidade_atual) as quantidade_a_repor
FROM estoque_ambulancias ea
JOIN ambulancias a ON ea.ambulancia_id = a.id
JOIN equipamentos_catalogo ec ON ea.equipamento_id = ec.id
WHERE ea.quantidade_atual < ea.quantidade_minima;

-- View: Pagamentos pendentes
CREATE VIEW vw_pagamentos_pendentes AS
SELECT 
    o.numero_ocorrencia,
    o.data_ocorrencia,
    o.tipo_trabalho,
    u.nome_completo as profissional,
    u.tipo_perfil,
    op.valor_pagamento,
    op.data_pagamento
FROM ocorrencias_participantes op
JOIN ocorrencias o ON op.ocorrencia_id = o.id
JOIN usuarios u ON op.usuario_id = u.id
WHERE op.pago = FALSE
AND o.status_ocorrencia = 'CONCLUIDA'
ORDER BY op.data_pagamento;
```

### RESUMO DO DATABASE

**Total de Tabelas:** 23
**Total de ENUMs:** 7
**Total de Índices:** 48+
**Total de Triggers:** 14
**Total de Views:** 5

**Estrutura:**
- 3 tabelas de usuários (usuarios, motoristas, escala)
- 4 tabelas de ambulâncias (ambulancias, equipamentos_catalogo, estoque_ambulancias, gastos_ambulancias)
- 3 tabelas de checklists
- # SISTEMA DE GESTÃO DE AMBULÂNCIAS - CONTEXTO COMPLETO DO PROJETO

**Data de Criação:** 07 de Outubro de 2025
**Desenvolvedor:** [Seu Nome]
**Assistente:** Claude (Anthropic)
**Repositório:** GitHub (sincronizado)
**Database:** PostgreSQL via Supabase (configurado)

---

## 📋 ÍNDICE

1. RESUMO EXECUTIVO
2. DOCUMENTAÇÃO FUNCIONAL COMPLETA
3. ESTRUTURA DO DATABASE (PostgreSQL)
4. STACK TECNOLÓGICA
5. INSTRUÇÕES DE DESENVOLVIMENTO
6. HISTÓRICO DE DECISÕES
7. PRÓXIMOS PASSOS

---

## 1. RESUMO EXECUTIVO

### Objetivo do Sistema
Sistema completo de gestão de ambulâncias para empresa que atende:
- Eventos (ambulância fica de plantão o dia todo)
- Emergências
- Atendimentos domiciliares
- Transferências de pacientes

### Plataformas
- Web (Desktop)
- Mobile iOS (PWA)
- Mobile Android (PWA)

### Usuários do Sistema (6 Perfis)
1. **Médico** - Profissional que atende pacientes
2. **Enfermeiro** - Profissional auxiliar
3. **Motorista** - Tablet fixo na ambulância
4. **Chefe dos Médicos** - Cria ocorrências, gerencia equipe médica
5. **Chefe dos Enfermeiros** - Verifica equipamentos médicos
6. **Chefe das Ambulâncias** - Verifica veículos, atribui recursos

---

## 2. DOCUMENTAÇÃO FUNCIONAL COMPLETA

### PERFIL: MÉDICO

#### PÁGINA: Dashboard/Home
**Funcionalidades principais:**
- Visualização de ocorrências disponíveis para inscrição
- Filtro automático: não aparecem ocorrências se o médico estiver de folga ou já alocado no mesmo horário
- Destaque visual das ocorrências já confirmadas

**Estatísticas exibidas:**
- Ocorrências atendidas por ele na semana (mês/ano)
- Ocorrências à receber (ao clicar nesta box mostrar data de pagamento de cada uma dessas ocorrências não pagas)
- Quantidade de remoções na semana/mês ("remoção" é transferência de paciente para hospital)

**Componentes:**

→ Componente: Detalhes da Ocorrência (Modal/Expandido)
*Acionado ao clicar em uma ocorrência no Dashboard*

**Variação por Status:**

Status: "EM ABERTO"
- Descrição da ocorrência
- Local da ocorrência
- Tipo de ocorrência (Emergência, transferência, evento, domiciliar)
- Funções na ocorrência (em aberto as que ainda não foram preenchidas. As que já foram, mostrar o nome da pessoa que está confirmada na função)
- Horário de saída e horário no local
- No caso de "evento", mostrar horário de término

Status: "CONFIRMADA"
*Status automático quando todas as funções necessárias são confirmadas pelos funcionários*
- Data, horário e local de saída da ambulância
- Tipo de ocorrência
- Tipo de Ambulância
- Carga Horária (no caso de eventos)
- Placa da ambulância (após atribuição pelo Chefe das Ambulâncias)
- Local da ocorrência
- Descrição da ocorrência

Status: "EM ANDAMENTO"
- Localização em tempo real da ambulância
- Fazer Cadastro de pacientes
- Input para adicionar fotos e documentos do paciente
- Formulário padrão (seguindo modelos de sistemas hospitalares modernos - checkbox de "remoção" interpretado pelo sistema nos prontuários)

**Ao final da ocorrência (antes de concluir):**

→ Componente Obrigatório: Registro de Consumo de Materiais
*Deve ser preenchido obrigatoriamente pelo médico ao final da ocorrência, enquanto verifica os itens na ambulância*

**Funcionalidades:**
- Lista com todos os materiais médicos disponíveis na ambulância (mesma lista do checklist do Chefe dos Enfermeiros)
- Campo para registrar quantidade utilizada de cada item durante toda a ocorrência
- Preenchido uma única vez ao final (não durante atendimentos)
- Atualização automática do estoque da ambulância no sistema
- Sistema interno (não visível no prontuário do paciente)

#### PÁGINA: Agenda
- Visualização mensal com todos os jobs confirmados
- Ao clicar em uma ocorrência específica, abre o componente "Detalhes da Ocorrência"

#### PÁGINA: Pacientes
*(Banco de Dados - Mesma do Chefe dos Médicos)*
- Repositório de informações sobre os pacientes atendidos
- É possível buscar pelo nome, ID de ocorrência ou data
- É possível clicar em um paciente específico e "expandir" seus últimos atendimentos e informações pessoais

**Colunas da tabela:**
- Nome, Idade, Sexo, Data do último atendimento, Local, Médico que atendeu, Ocorrência, Queixa principal

→ Componente: Histórico do Paciente (Expandido)
*Ao clicar em um paciente específico*
- Lista com últimos atendimentos
- Histórico completo
- Ao clicar em um atendimento: visualização do prontuário e arquivos do médico sobre aquele atendimento

---

### PERFIL: ENFERMEIRO

#### PÁGINA: Dashboard/Home
**Funcionalidades principais:**
- Visualização de ocorrências disponíveis para inscrição
- Filtro automático: não aparecem ocorrências se o enfermeiro estiver de folga ou já alocado no mesmo horário
- Destaque visual das ocorrências já confirmadas

**Estatísticas exibidas:**
- Ocorrências atendidas por ele na semana (mês/ano)
- Ocorrências à receber (ao clicar nesta box mostrar data de pagamento de cada uma dessas ocorrências não pagas)
- Quantidade de remoções na semana/mês ("remoção" é transferência de paciente para hospital)

**Componentes:**

→ Componente: Detalhes da Ocorrência (Modal/Expandido)

Status: "EM ABERTO"
- Descrição da ocorrência
- Local da ocorrência
- Tipo de ocorrência (Emergência, transferência, evento, domiciliar)
- Funções na ocorrência
- Horário de saída e horário no local
- No caso de "evento", mostrar horário de término

Status: "CONFIRMADA"
*Status automático quando todas as funções necessárias são confirmadas pelos funcionários*
- Data, horário e local de saída da ambulância
- Tipo de ocorrência
- Tipo de Ambulância
- Carga Horária (no caso de eventos)
- Placa da ambulância (após atribuição pelo Chefe das Ambulâncias)
- Local da ocorrência
- Descrição da ocorrência

Status: "EM ANDAMENTO"
- Localização em tempo real da ambulância

→ Componente: Notas sobre Pacientes
*Disponível durante ocorrência em andamento*
- Enfermeiro pode clicar em qualquer paciente atendido durante a ocorrência
- Abre campo para atribuir uma "Nota" sobre aquele paciente específico
- Nota fica salva nos dados do atendimento daquele paciente
- Pode ser acessada posteriormente no banco de dados de pacientes

#### PÁGINA: Agenda
- Visualização mensal com todos os jobs confirmados
- Ao clicar em uma ocorrência específica, abre o componente "Detalhes da Ocorrência"

#### PÁGINA: Pacientes
- Repositório de informações sobre os pacientes atendidos

---

### PERFIL: MOTORISTA (TABLET)

**OBS:** Tablet fixo na ambulância. Não precisa aceitar ocorrências. Quando o Chefe das Ambulâncias atribui a ambulância e motorista a uma ocorrência, ela abre automaticamente no tablet específico daquele veículo.

**REGRAS ESPECÍFICAS:**
- A ocorrência aparece automaticamente no tablet no momento em que o Chefe das Ambulâncias atribui aquela ambulância específica a uma ocorrência
- Neste momento, o motorista visualiza os detalhes e pode clicar em "Iniciar Ocorrência"
- **Ao clicar em "Iniciar Ocorrência", o status muda para "Em Andamento" para todos os integrantes**
- No caso da ambulância precisar buscar um médico, o primeiro destino será sempre a residência do mesmo
- Após buscar o médico, o motorista poderá clicar em "Próximo destino", abrindo o trajeto até o exato local da ocorrência

#### PÁGINA: Ocorrência Ativa

**Conteúdo exibido no Status "EM ANDAMENTO":**
- Tipo de ocorrência
- Tipo de Ambulância (emergência ou básica)
- GPS com localização do destino e rota em tempo real (INTEGRAÇÃO COM WAZE/MAPS/OUTRO - o mais barato e utilizado)
- Botão "Próximo destino" (quando aplicável - buscar médico primeiro)
- Mesma integração para trajeto de volta para base
- Lista de integrantes da ambulância com nome e link para contato pelo WhatsApp
- Carga horária (no caso de eventos)

**Ações disponíveis:**
- Botão "Iniciar Ocorrência" (muda status de "Confirmada" para "Em Andamento" para todos os integrantes)
- Botão "Próximo Destino" (quando há múltiplas paradas)
- Botão "Concluir Ocorrência" (finaliza a operação)

---

### PERFIL: CHEFE DOS MÉDICOS

#### PÁGINA: Dashboard/Home
**Estatísticas exibidas:**
- Ambulâncias Ativas
- Profissionais disponíveis
- Ocorrências hoje (com opção de mudar para semanal ou mensal)
- Tempo médio de resposta das ocorrências
- Avisos de manutenção de ambulâncias ou documentação de motoristas ou falta de equipamento

→ Botão: Criar Nova Ocorrência
*Redireciona para a PÁGINA: Central de Despacho*

#### PÁGINA: Central de Despacho
**Conteúdo exibido:**
- Todos os chamados que ainda não foram criados no sistema
- Ambulâncias disponíveis no momento, filtradas por tipo

→ Componente: Formulário de Criação de Ocorrência

**Campos do formulário:**
- Tipo de ambulância (emergência ou básica)
  - **Se Básica:** Sistema cria automaticamente 1 vaga para enfermeiro (sem médico)
  - **Se Emergência:** Sistema cria automaticamente 1 vaga para médico + 1 vaga para enfermeiro
- Quantidade adicional de enfermeiros (se necessário mais que 1)
- Tipo de trabalho (evento, domiciliar, emergência, transferência)
- Data
- Local
- Horário
- Pagamento para cada função
- Data de pagamento de cada função

**Ação:** Lançamento da ocorrência no sistema para médicos e enfermeiros se cadastrarem conforme vagas criadas

#### PÁGINA: Ocorrências
*(Banco de Dados - Formato Tabela)*
**Mostrar no topo da tabela primeiro as ocorrências ativas no momento**

→ Componente: Filtros de Busca
- Por data
- Por ID (número de ocorrência)
- Por tipo de ocorrência (evento, urgência, domiciliar, transferência)
- Por tipo de ambulância

→ Componente: Detalhes da Ocorrência (Modal/Expandido)

**Conteúdo para Status "ATIVA" (Confirmada ou Em Andamento):**
- Informações conforme status atual da ocorrência (mesmas informações que o médico visualiza)
- Opção de enviar avisos ao vivo para todos os integrantes da ocorrência

**Conteúdo para Status "CONCLUÍDA":**
- Local da ocorrência
- Duração desde a chamada até a conclusão
- Informações do paciente ou dos pacientes: Nome, Idade, Quadro clínico
- Informação do veículo utilizado (Placa)
- Tipo de ocorrência
- Local
- Funcionários que participaram

#### PÁGINA: Rastreamento
→ Componente: Mapa Interativo
- Exibe localização de todas as ambulâncias ativas em serviço
- Ao clicar em uma ambulância individual, abre o componente "Detalhes da Ocorrência"

#### PÁGINA: Ambulâncias
*(Banco de Dados)*

→ Componente: Botão para Cadastro de Nova Ambulância
**Ação:** Ao clicar no botão, abrir formulário para ser preenchido e cadastrar nova ambulância

→ Componente: Formulário para Cadastro
**Campos:**
- Marca do carro
- Modelo do carro
- Ano
- Motor
- Placa
- Kilometragem
- Última revisão

→ Componente: Lista de Ambulâncias
*Ao clicar em uma ambulância específica, expande/abre componente de detalhes*

→ Componente: Detalhes da Ambulância
**Conteúdo exibido:**
- Últimas ocorrências atendidas (ao clicar em uma ocorrência, o sistema leva para página "Ocorrências" com a ocorrência em questão aberta)
- **Estatísticas:**
  - Gastos
  - Número de ocorrências atendidas (diariamente, semanalmente, mensal e anual)
  - Porcentagem por tipo de atendimento (emergência, evento, domiciliar ou transferência)

#### PÁGINA: Profissionais
*(Banco de Dados - Formato Tabela)*

**Colunas da tabela:**
- Nome completo
- Função
- CPF
- Email
- Telefone
- Idade
- Sexo

#### PÁGINA: Pacientes
*(Banco de Dados - Formato Tabela)*

**Colunas da tabela:**
- Nome, Idade, Sexo, Data do último atendimento, Local, Médico que atendeu, Ocorrência, Queixa principal

→ Componente: Histórico do Paciente (Expandido)
- Lista com últimos atendimentos e histórico
- Ao clicar em um atendimento: visualização do prontuário e arquivos do médico sobre aquele atendimento

#### PÁGINA: Escala
→ Componente: Calendário de Escala
**Funcionalidades:**
- Seleção de quem está de licença
- Definição de quem trabalha em certos dias da semana
- Manutenção atualizada do dashboard sobre disponibilidade dos profissionais

---

### PERFIL: CHEFE DAS AMBULÂNCIAS

#### PÁGINA: Dashboard/Home
**Estatísticas exibidas:**
- Ambulâncias disponíveis
- Ambulâncias em manutenção
- Gastos médios da frota/por ambulância/por ocorrência (mensal/semanal/diário)

→ Componente: Card de Ambulância (Clicável)
*Ao clicar em uma ambulância específica no dashboard*

**Informações exibidas:**
- Tanque de gasolina
- Última revisão
- Kilometragem
- Ano
- Modelo
- Motor
- Placa

#### PÁGINA: Status Ambulâncias
**Funcionalidades principais:**
- Controle de manutenção e verificação técnica dos veículos
- Visualização das ambulâncias que estão em ocorrência no momento
- Ao clicar em uma ambulância em ocorrência, são abertos os detalhes da ocorrência no status "Em andamento"

**Responsabilidades do perfil:**
- Acompanhamento do estado dos veículos (Kilometragem, revisão, gastos com gasolina, etc.)
- Verificação diária dos parâmetros técnicos da ambulância
- **NÃO é responsável por equipamentos médicos** (essa responsabilidade é do Chefe dos Enfermeiros)

→ Componente: Lista de Ambulâncias com Status

**Status possíveis:**
- "Pronta" - Ambulância liberada para operação (verificações técnica E médica completas)
- "Pendente" - Aguardando verificações (status automático após retorno à base)
- "REVISÃO" - Ambulância passou da kilometragem recomendada para revisão

**Regras automáticas:**
- Quando uma ocorrência é concluída e retorna para base, automaticamente o status no sistema muda para "Pendente"
- Sistema sinaliza status "REVISÃO" caso kilometragem recomendada tenha sido ultrapassada

#### PÁGINA: Atribuição de Ocorrências
**Funcionalidades principais:**
- Gerenciamento de ocorrências confirmadas aguardando atribuição de veículo e motorista
- **Esta página existe apenas no perfil do Chefe das Ambulâncias**

**Responsabilidade do perfil:**
- **Atribuir ambulância e motorista específicos a cada ocorrência confirmada**
- É o dever do Chefe das Ambulâncias fazer isso antes de cada ambulância sair para atender uma ocorrência

→ Componente: Lista de Ocorrências Confirmadas
**Conteúdo exibido:**
- **Apenas ocorrências com status "CONFIRMADA"** (todas as funções preenchidas pelos funcionários, aguardando atribuição)

→ Componente: Modal de Atribuição de Recursos
*Ao clicar em uma ocorrência confirmada*

**Funcionalidades:**
- Visualização dos detalhes da ocorrência (incluindo tipo: Emergência ou Básica)
- Seleção de ambulância específica (entre as disponíveis com status "Pronta" **do mesmo tipo** da ocorrência)
- Seleção de motorista específico (entre os disponíveis)
- Botão "Confirmar Atribuição"

**Ação após confirmar atribuição:**
- **Status da ocorrência permanece "CONFIRMADA"** (não muda ainda)
- Ocorrência é vinculada à ambulância e motorista selecionados
- **Tablet da ambulância específica abre automaticamente a ocorrência**
- Motorista visualiza a ocorrência e o botão "Iniciar Ocorrência"
- **Somente quando o motorista clicar em "Iniciar Ocorrência" o status muda para "Em Andamento"**
- Placa da ambulância passa a aparecer nos detalhes da ocorrência para todos os participantes

→ Componente: Detalhes e Checklist da Ambulância
*Acionado ao clicar em uma ambulância específica na lista de status*

**Sub-componente: Checklist de Veículo**
**Funcionalidades:**
- Checklist dos parâmetros técnicos da ambulância:
  - Gasolina
  - Kilometragem
  - Temperatura do veículo
  - Pressão dos pneus
  - Data para próxima revisão
- Opção de dar "check" em cada item
- **Realizado diariamente no início do dia**

---

### PERFIL: CHEFE DOS ENFERMEIROS

**Funcionalidades Gerais:**
- Pode enviar avisos e notas para seus funcionários antes ou durante uma ocorrência
- **Responsável pela verificação de equipamentos médicos nas ambulâncias**
- Realiza verificação matinal de todas as ambulâncias diariamente

#### PÁGINA: Dashboard/Home
**Estatísticas exibidas:**
- Ambulâncias prontas (equipamentos médicos verificados)
- Ambulâncias pendentes de verificação
- Alertas de reposição de materiais

#### PÁGINA: Status de Equipamentos Médicos
**Funcionalidades principais:**
- Controle e liberação de ambulâncias para operações (aspecto médico)
- Gestão de estoque de materiais médicos
- **Verificação matinal de todas as ambulâncias no início do dia**

**Responsabilidades do perfil:**
- Abastecimento de materiais médicos nas ambulâncias
- Verificar e repor equipamentos e utensílios antes de uma ambulância sair
- **"Liberar" uma ambulância para operação após verificação de equipamentos médicos**

→ Componente: Lista de Ambulâncias com Status de Equipamentos
**Informações exibidas:**
- Todas as ambulâncias
- Status de verificação de equipamentos médicos
- Indicação de materiais a repor (baseado no consumo registrado pelos médicos)

→ Componente: Checklist de Equipamentos Médicos
*Acionado ao clicar em uma ambulância específica*

**Funcionalidades:**
- **PRIMEIRO:** Definir o tipo de operação da ambulância (Emergência ou Básica)
  - Esta escolha define qual checklist de equipamentos será utilizado
- Checklist de todos os equipamentos médicos necessários conforme tipo selecionado
- **Cada tipo de ambulância tem checklist diferente**
- Visualização de quantidade atual de cada material (atualizado automaticamente pelo registro do médico)
- Indicação de materiais que precisam reposição
- Opção de dar "check" em cada equipamento após reposição
- Botão para marcar ambulância como "Pronta para operação"

**Lista Completa de Equipamentos para Checklist:**

**OBS:** No database, cada item será classificado como "Emergência" ou "Básica" e também por categoria. Esta classificação será definida posteriormente.

**CATEGORIA: KIT VIAS AÉREAS / AMBU/BOLSA**
- Ambu Adulto (Adu.)
- Ambu Infantil (Inf.)
- Máscara para Ambu
- Máscara com Bolsa e Reservatório Adulto (Másc. Bolsa Reser. Adu.)
- Máscara com Bolsa e Reservatório Infantil (Másc. Bolsa Reser. Inf.)
- Tubo Orotraqueal (TOT) Nº 3.5, 4.5, 5.5, 6.5, 7.5, 8.5
- Cânula de Guedel Nº 00, 1, 2, 3, 4, 5, 6
- Teste Laringoscópio
- Lâminas Curvas e Retas
- Máscara Laríngea (Adu. / Inf.)
- Sonda Aspiração Nº 10, 12, 14, 16
- Filtro Respirador
- Fixador de Tubo

**CATEGORIA: KIT EPI'S INDIVIDUAL**
- Luva estéril (Pares)
- Luva de procedimento (Caixa)
- Máscara N95 (Individual)
- Óculos
- Máscara Cirúrgica
- Touca descartável

**CATEGORIA: KIT PROCEDIMENTO E PUNÇÃO**
- Atadura de crepe
- Compressa e Gaze
- Bandagem Triangular
- Esparadrapo / Micropore
- Jelco Nº 18, 20, 22, 24
- Scalpe Nº 19, 21, 23, 25, 27
- Agulhas e Seringas (diversos tamanhos)
- Three-way (torneirinha de 3 vias)
- Equipo macrogotas

**CATEGORIA: MATERIAIS ELÉTRICOS**
- Oxímetro
- Esfigmomanômetro
- Glicosímetro
- Lanterna
- Termômetro

**CATEGORIA: MATERIAL AMB (Geral)**
- Fita de glicemia
- Ficha de atendimento
- Manta térmica
- Talas (P, M, G)
- Head block / imobilizador cabeça
- KED e Cinto
- Colar cervical (P, M, G)
- Sacos de lixo (infectante e comum)
- Cobertor ou lençol
- Frasco de aspiração e extensão
- Cilindro de O2 (fixo e móvel)
- Válvula com manômetro
- Descarpack
- Chave de Oxigênio
- Tesoura
- Kit Queimado
- Álcool 70% / Antisséptico

**CATEGORIA: KIT SUTURA BOLSA**
- Bisturi com lâmina
- Fio de sutura
- Porta Agulha / Hemostática
- Pinça Anatômica / Dente de Rato
- Tesoura Íris

**CATEGORIA: KIT SONDAGEM BOLSA**
- Sonda Vesical de Demora (SVD)
- Sonda Vesical de Alívio (SVA)
- Sonda Nasoenteral (SNE)
- Umidificador

**Ação após marcar como "Pronta":**
- Ambulância fica disponível para ser atribuída a ocorrências pelo Chefe das Ambulâncias
- Apenas ambulâncias com status "Pronta" (checklists técnico E médico aprovados) podem ser atribuídas a ocorrências
- **Ambulância fica classificada com o tipo definido (Emergência ou Básica) até nova verificação**

**Rotina Matinal:**
- No início de cada dia, o Chefe dos Enfermeiros verifica todas as ambulâncias
- **Define o tipo de cada ambulância (Emergência ou Básica)** antes de iniciar checklist
- Completa checklist correspondente ao tipo escolhido
- Repõe materiais conforme necessário
- Objetivo: deixar toda a frota com status "Pronta" no início do dia
- À medida que voltam de ocorrências, status atualiza automaticamente para "Pendente"

---

## COMPONENTES COMPARTILHADOS

### Componente: Detalhes da Ocorrência
*Componente reutilizável em múltiplos contextos*

**Utilizado em:**
- Dashboard do Médico
- Agenda do Médico
- Dashboard do Enfermeiro
- Agenda do Enfermeiro
- Ocorrência Ativa do Motorista (Tablet)
- Página de Ocorrências do Chefe dos Médicos
- Página de Rastreamento do Chefe dos Médicos
- Página de Status Ambulâncias do Chefe das Ambulâncias (quando ambulância está em ocorrência)
- **Página de Atribuição de Ocorrências do Chefe das Ambulâncias (ocorrências confirmadas)**

**Variações:**
- Conteúdo adaptado conforme perfil do usuário
- Conteúdo adaptado conforme status da ocorrência (Em Aberto, Confirmada, Em Andamento, Concluída)

---

## REGRAS DE NEGÓCIO E LÓGICA DO SISTEMA

### Estados das Ocorrências

1. **Em Aberto** - Ocorrência criada pelo Chefe dos Médicos, aguardando profissionais aceitarem (visível para médicos e enfermeiros)
2. **Confirmada** - Todas as funções necessárias foram confirmadas pelos funcionários (mudança automática). Aguardando Chefe das Ambulâncias atribuir veículo e motorista
3. **Em Andamento** - Chefe das Ambulâncias atribuiu ambulância e motorista. Motorista iniciou a ocorrência no tablet, operação ativa
4. **Concluída** - Operação finalizada

### Tipos de Trabalho

#### Evento
- Ambulância pode ficar o dia todo
- Ambulância fica de "plantão", caso alguém necessite de atendimento médico durante o evento

#### Domiciliar
- Pessoa está pagando para ser atendida por um médico e enfermeiro na sua residência
- Ambulância vai até a casa do paciente e atende um único paciente naquela ocorrência

#### Emergência
- *(A ser definido)*

#### Transferência
- Algum paciente que está em uma clínica ou hospital parceiro precisa ser movido para outro local
- A empresa leva o paciente em uma de suas ambulâncias
- Classificado como "remoção" no sistema

### Tipos de Ambulância

**Cada tipo determina a composição da equipe e tem checklist de equipamentos médicos diferente**

#### Básica
- **Equipe:** 1 Enfermeiro (sem médico)
- **Checklist:** Itens classificados como "Básica" no database (a serem definidos quais itens da lista completa)

#### Emergência
- **Equipe:** 1 Médico + 1 Enfermeiro (obrigatoriamente)
- **Checklist:** Itens classificados como "Emergência" no database (a serem definidos quais itens da lista completa)

**Nota:** O tipo de ambulância escolhido ao criar a ocorrência define automaticamente as vagas de profissionais disponíveis

### Status das Ambulâncias

#### Pronta
- Liberada para operação após checklists completos
- **Requer aprovação de AMBOS:**
  - Checklist técnico (Chefe das Ambulâncias)
  - Checklist de equipamentos médicos (Chefe dos Enfermeiros)

#### Pendente
- Aguardando verificação e checklist
- Status automático após retorno à base

#### REVISÃO
- Necessita revisão técnica
- Kilometragem ultrapassou limite recomendado

### Lógica de Disponibilidade

- Profissionais de folga não veem ofertas de ocorrências no Dashboard
- Profissionais já alocados em outro job no mesmo horário não veem ofertas
- Sistema verifica automaticamente a agenda antes de exibir ocorrências disponíveis

### Fluxo Completo de Mudança de Status

1. **Chefe dos Médicos cria ocorrência** → Status: "Em Aberto"
2. **Profissionais aceitam participação** → Status muda automaticamente para "Confirmada" quando todas as funções são preenchidas
3. **Chefe das Ambulâncias atribui ambulância e motorista específicos à ocorrência** → Ocorrência abre automaticamente no tablet da ambulância atribuída
4. **Motorista clica em "Iniciar Ocorrência" no tablet** → Status: "Em Andamento" (para todos os integrantes)
5. **Operação finalizada** → Status: "Concluída"
6. **Ambulância retorna à base** → Status da ambulância muda automaticamente para "Pendente"

### Fluxo de Gestão de Materiais Médicos

1. **Verificação Matinal:** Chefe dos Enfermeiros define tipo da ambulância (Emergência ou Básica), verifica e repõe materiais conforme checklist do tipo → Status "Pronta"
2. **Durante Ocorrência:** Médico atende pacientes (não registra consumo ainda)
3. **Final da Ocorrência:**